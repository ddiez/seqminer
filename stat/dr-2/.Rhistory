library(ggplot2)
demo("ggplot2")
demo("ggplot")
ls()
ls("package:ggplot2")
ggplot(
)
foo <- matrix(rnorm(10*5), nrow = 10, ncol = 5)
foo
panel.levelplot(1:10, 1:5, foo)
library(lattice)
panel.levelplot(1:10, 1:5, foo)
panel.levelplot(1:10, 1:5, foo, 1)
print(panel.levelplot(1:10, 1:5, foo, 1))
panel.levelplot(1:10, 1:5, foo, 1)->p
print(p)
?panel.levelplot
foo <- read.table("stat_result.txt")
foo[grep("-core|-est", foo),]
foo[grep("-core|-est", foo[,2]),]
goo <- foo[grep("-core|-est", foo[,2]),]
goo[,2]
sub
gsub("-core|-est", goo[,2])
gsub("-core|-est", "", goo[,2])
goo[,2] <- gsub("-core|-est", "", goo[,2])
goo[,2]
goo <- foo[grep("-core|-est", foo[,2]),]
goo[,2] <- as.factor(gsub("-core|-est", "", goo[,2]))
goo[,2]
goo <- foo[grep("-core|-est", foo[,2]),]
goo[,2] <- gsub("-core|-est", "", goo[,2])
for(s in unique(goo[,2])) {#
	print(s)#
}
	goo[goo[,2] == s,]
for(s in unique(goo[,2])) {#
	goo[goo[,2] == s,]#
}
for(s in unique(goo[,2])) {#
	print(goo[goo[,2] == s,])#
}
for(s in unique(goo[,2])) {#
	sum(goo[goo[,2] == s, 4])#
}
for(s in unique(goo[,2])) {#
	ss <- sum(goo[goo[,2] == s, 4])#
	print(ss)#
}
for(s in unique(goo[,2])) {#
	tmp <- goo[goo[,2] == s,]#
	ss <- sum(tmp[,4])#
	c(unique(goo[,1]), s, unique(goo[,3]), ss)#
}
for(s in unique(goo[,2])) {#
	tmp <- goo[goo[,2] == s,]#
	ss <- sum(tmp[,4])#
	print(c(unique(goo[,1]), s, unique(goo[,3]), ss))#
}
for(s in unique(goo[,2])) {#
	tmp <- goo[goo[,2] == s,]#
	ss <- sum(tmp[,4])#
	print(ss)#
}
ooo <- c()#
for(s in unique(goo[,2])) {#
	tmp <- goo[goo[,2] == s,]#
	ss <- sum(tmp[,4])#
	ooo <- rbind(ooo, c(unique(goo[,1]), s, unique(goo[,3]), ss))#
}
ooo
for(s in unique(goo[,2])) {#
	tmp <- goo[goo[,2] == s,]#
	ss <- sum(tmp[,4])#
	ooo <- rbind(ooo, c(unique(tmp[,1]), s, unique(tmp[,3]), ss))#
}
ooo
ooo <- c()#
for(s in unique(goo[,2])) {#
	tmp <- goo[goo[,2] == s,]#
	ss <- sum(tmp[,4])#
	ooo <- rbind(ooo, c(unique(tmp[,1]), s, unique(tmp[,3]), ss))#
}
ooo
goo
goo[,1]
ooo <- c()#
for(s in unique(goo[,2])) {#
	tmp <- goo[goo[,2] == s,]#
	ss <- sum(tmp[,4])#
	ooo <- rbind(ooo, c(levels(tmp[,1]), s, unique(tmp[,3]), ss))#
}
ooo
ooo <- c()#
for(s in unique(goo[,2])) {#
	tmp <- goo[goo[,2] == s,]#
	ss <- sum(tmp[,4])#
	ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, unique(tmp[,3]), ss))#
}
ooo
foo
goo
ooo <- c()#
for(s in unique(goo[,2])) {#
	tmp <- goo[goo[,2] == s,, drop = FALSE]#
	ss <- sum(tmp[,4])#
	ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, unique(tmp[,3]), ss))#
}
ooo
for(s in unique(goo[,2])) {#
	tmp <- goo[goo[,2] == s,, drop = FALSE]#
	ss <- sum(tmp[,4])#
	print(s)#
	print(ss)#
	print(unique(as.character(tmp[,1])))#
}
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		print(s)#
		print(ss)#
		print(unique(as.character(tmp[,1])))#
	}#
}
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(unique(as.character(tmp[,1])), s, ss)#
	}#
}
ooo
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo, unique(as.character(tmp[,1])), s, ss)#
	}#
}
ooo
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, ss))#
	}#
}
ooo
ooo <- data.frame()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, ss))#
	}#
}
ooo
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, ss))#
	}#
}
ooo
as.data.frame(ooo)
as.data.frame(ooo)[,3]
as.numeric(ooo[,3])
ooo[,3] <- as.numeric(ooo[,3])
ooo
ooo <- as.data.frame(ooo)
ooo[,3] <- as.numeric(ooo[,3])
ooo
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, ss))#
	}#
}
res <- data.frame(Ortholog = ooo[,1], Organism = ooo[,2], Count = as.numeric(ooo[,3]))
res
res[,3]
res[,2]
res[,1]
foo
foo[,3] == "spp"
foo[foo[,3] == "spp", c(1,2,4)]
res <- rbind(res, foo[foo[,3] == "spp", c(1,2,4)])
tmp <- foo[foo[,3] == "spp", c(1,2,4)]
tmp
colnames(tmp) <- NULL
tmp
tmp <- foo[foo[,3] == "spp", c(1,2,4)]
colnames(tmp) <- c("Ortholog", "Organism", "Count")
res <- rbind(res, tmp)
res
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, c(unique(as.character(tmp[,3])), ss))#
	}#
}
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, c(unique(as.character(tmp[,3])), ss))#
	}#
}#
res <- data.frame(Ortholog = ooo[,1], Organism = ooo[,2], Count =
res <- data.frame(Ortholog = ooo[,1], Organism = ooo[,2], Count = as.numeric(ooo[,3]))
)
res
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, c(unique(as.character(tmp[,3])), ss))#
	}#
}
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, c(unique(as.character(tmp[,3])), ss))#
	}#
}
ooo <- c()
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo, c(unique(as.character(tmp[,1])), s, c(unique(as.character(tmp[,3])), ss))#
	}#
}
		ooo <- rbind(ooo,c(unique(as.character(tmp[,1])),s,c(unique(as.character(tmp[,3])), ss))
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo,c(unique(as.character(tmp[,1])), s , unique(as.character(tmp[,3])), ss))#
	}#
}
ooo
res <- data.frame(Ortholog = ooo[,1], Organism = ooo[,2], Type = ooo[,3], Count = as.numeric(ooo[,3]))
res
res <- data.frame(Ortholog = ooo[,1], Organism = ooo[,2], Type = ooo[,3], Count = as.numeric(ooo[,4]))
res
tmp <- foo[foo[,3] == "spp", ]
colnames(tmp) <- c("Ortholog", "Organism", "Type", "Count")
res <- rbind(res, tmp)
res
res <- data.frame(Ortholog = ooo[,1], Taxon = ooo[,2], Type = ooo[,3], Count = as.numeric(ooo[,4]))#
#
tmp <- foo[foo[,3] == "spp", ]#
colnames(tmp) <- c("Ortholog", "Taxon", "Type", "Count")#
#
res <- rbind(res, tmp)
res
library(lattice)#
#
#
heatMap <- function(mat) {#
	foo <- matrix(NA, nrow = nlevels(mat[, "Ortholog"]), ncol = nlevels(mat[, "Taxon"]), dimnames = list(levels(mat[, "Ortholog"]), levels(mat[, "Taxon"])))#
	apply(mat, 1, function(x) foo[x[1], x[2]] <<- as.numeric(x[4]))#
	col <- colorRampPalette(c("grey90", "steelblue", "darkblue", "orange"))(100)#
	levelplot(foo, col.regions = col, scales = list(rot = 45), colorkey = list(tick.number = 10, at = seq(-1000, signif(max(mat[, "Count"]), 2), 1000)), cuts = 9, xlab = "Orthologs", ylab = "Species", main = "Distribution of sequences in varDB DR-3")#
	foo#
}
heatMap(res)
heatMap <- function(mat) {#
	foo <- matrix(NA, nrow = nlevels(mat[, "Ortholog"]), ncol = nlevels(mat[, "Taxon"]), dimnames = list(levels(mat[, "Ortholog"]), levels(mat[, "Taxon"])))#
	apply(mat, 1, function(x) foo[x[1], x[2]] <<- as.numeric(x[4]))#
	col <- colorRampPalette(c("grey90", "steelblue", "darkblue", "orange"))(100)#
	levelplot(foo, col.regions = col, scales = list(rot = 45), colorkey = list(tick.number = 10, at = seq(-1000, signif(max(mat[, "Count"]), 2), 1000)), cuts = 9, xlab = "Orthologs", ylab = "Species", main = "Distribution of sequences in varDB DR-3")#
}
heatMap(res)
res
barchart
barchart(Count ~ Taxon, res)
barchart(Count ~ Taxon, res, group = Ortholog)
barchart(Count ~ Ortholog, res, group = Taxon)
barchart(Count ~ Ortholog, res, group = Taxon, autokey = TRUE)
barchart(Count ~ Ortholog, res, group = Taxon, auto.key = TRUE)
barchart(Count ~ Ortholog, res, group = Taxon, auto.key = list(space = "right"))
barchart(Count ~ Ortholog, res, group = Taxon, auto.key = list(space = "right", cex = 0.6))
barchart(Count ~ Ortholog, res, group = Taxon, auto.key = list(space = "right", cex = 0.6), scale = list(log = 10))
barchart(Count ~ Ortholog, res, group = Taxon, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10)))
barchart(Count ~ Ortholog, res, group = Taxon, auto.key = list(space = "right", cex = 0.6))
barchart(Count ~ Ortholog, res, group = Taxon, auto.key = list(space = "right", cex = 0.6), scale = list(x = list(rot = 45)))
res[, "Ortholog"]
res[, "Ortholog"] == "bir"
res[res[, "Ortholog"] == "bir",]
?barchart
barchart(Count ~ Ortholog, res, group = Taxon, auto.key = list(space = "right", cex = 0.6), scale = list(x = list(rot = 45)), drop.unused.levels = TRUE)
barchart(Count ~ Ortholog, res, auto.key = list(space = "right", cex = 0.6), scale = list(x = list(rot = 45)))
barchart(Count ~ Taxon, res, auto.key = list(space = "right", cex = 0.6), scale = list(x = list(rot = 45)))
xyplot(Count ~ Ortholog, res, group = Taxon, auto.key = list(space = "right", cex = 0.6), scale = list(x = list(rot = 45)))
xyplot(Count ~ Ortholog | Taxon, res, group = Taxon, auto.key = list(space = "right", cex = 0.6), scale = list(x = list(rot = 45)))
xyplot(Count ~ Ortholog | Taxon, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(x = list(rot = 45)))
xyplot(Count ~ Ortholog | Taxon, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 45)))
xyplot(Count ~ Ortholog | Taxon, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 45, cex = 0.5)))
xyplot(Count ~ Ortholog | Taxon, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 45, cex = 0.6)))
xyplot(Count ~ Ortholog | Taxon, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 90, cex = 0.6)))
xyplot(Count ~ Ortholog | Taxon, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 90, cex = 0.8)))
xyplot(Count ~ Ortholog | Taxon, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 90, cex = 0.7)))
foo <- read.table("stat_source_spp.txt")
foo <- read.table("stat_source_original.txt")
foo
foo1 <- read.table("stat_source_original.txt")
foo2 <- read.table("stat_source_accepted.txt")
foo2
foo1 <- cbind(foo1, rep("original", nrow(foo1)))
foo1
colnames(foo1) <- c("Taxon", "Type", "Count", "Status")
foo2 <- cbind(foo2, rep("accepted", nrow(foo2)))
colnames(foo2) <- c("Taxon", "Type", "Count", "Status")
foo2
foo1
res <- rbind(foo1, foo2)
res
res[, "Count"]
xyplot(Count ~ Taxon)
xyplot(Count ~ Taxon, res)
xyplot(Count ~ Taxon | Type, res)
foo1
foo2
res2 <- data.frame(foo1[, 1:3], Count2 = foo2[, 3]))
res2 <- data.frame(foo1[, 1:3], Count2 = foo2[, 3])
res2
xyplot(Count | Count2 ~ Taxon, res2)
xyplot(Count | Count2 ~ Taxon, res2, group = Taxon)
foo2
foo1
res2
res2 <- data.frame(foo1[, 1:3], Count2 = foo2[, 3], Ratio = foo1[,3]/foo2[,3])
res2
res2 <- data.frame(foo1[, 1:3], Count2 = foo2[, 3], Ratio = foo2[,3]/foo1[,3])
res2
xyplot(Ratio ~ Taxon, res2, group = Taxon)
xyplot(Ratio ~ Taxon, res2, group = Taxon, scale = list(x = list(rot = 45))))
xyplot(Ratio ~ Taxon, res2, group = Taxon, scale = list(x = list(rot = 45)))
xyplot(Count | Ratio ~ Taxon, res2, group = Taxon, scale = list(x = list(rot = 45)))
xyplot(Count + Ratio ~ Taxon, res2, group = Taxon, scale = list(x = list(rot = 45)))
xyplot(Count + Ratio ~ Taxon, res2, group = Taxon, scale = list(x = list(rot = 45)), outer = TRUE)
xyplot(Count + Ratio ~ Taxon, res2, group = Taxon, scale = list(x = list(rot = 45)), outer = FALSE)
xyplot(Count + Ratio ~ Taxon, res2, group = Taxon, scale = list(x = list(rot = 45)), outer = TRUE)
xyplot(Count | Ratio ~ Taxon, res2, group = Taxon, scales = list(x = list(rot = 45)))
xyplot(Count + Ratio ~ Taxon, res2, group = Taxon, scales = list(x = list(rot = 45)))
xyplot(Count + Ratio ~ Taxon, res2, group = Taxon, scales = list(relation = "free", x = list(rot = 45)))
xyplot(Count + Ratio ~ Taxon, res2, group = Type, scales = list(relation = "free", x = list(rot = 45)))
xyplot(Count + Ratio ~ Taxon, res2, group = Type, scales = list(relation = "free", x = list(rot = 45)), auto.key = list(space = "right"))
xyplot(Count + Count2 + Ratio ~ Taxon, res2, group = Type, scales = list(relation = "free", x = list(rot = 45)), auto.key = list(space = "right"))
xyplot(Count + Count2 + Ratio ~ Taxon, res2, group = Type, scales = list(relation = "sliced", x = list(rot = 45)), auto.key = list(space = "right"))
xyplot(Count + Count2 + Ratio ~ Taxon, res2, group = Type, scales = list(relation = "free", x = list(rot = 45)), auto.key = list(space = "right"))
res <- data.frame(foo1[, 1:3], Count2 = foo2[, 3], Ratio = foo2[,3]/foo1[,3])
res
foo1 <- read.table("stat_source_original.txt")#
foo1 <- cbind(foo1, rep("original", nrow(foo1)))#
colnames(foo1) <- c("Taxon", "Type", "Original", "Status")
foo2 <- read.table("stat_source_accepted.txt")#
foo2 <- cbind(foo2, rep("accepted", nrow(foo2)))#
colnames(foo2) <- c("Taxon", "Type", "Accepted", "Status")
res <- data.frame(foo1[, 1:3], Count2 = foo2[, 3], Ratio = foo2[,3]/foo1[,3])
res
res <- data.frame(foo1[, 1:3], foo2[, 3], Ratio = foo2[,3]/foo1[,3])
res
res <- data.frame(foo1[, 1:3], foo2[, 3, drop = F], Ratio = foo2[,3]/foo1[,3])
res
xyplot(Original + Accepted + Ratio ~ Taxon, res2, group = Type, scales = list(relation = "free", x = list(rot = 45)), auto.key = list(space = "right"))
xyplot(Original + Accepted + Ratio ~ Taxon, res, group = Type, scales = list(relation = "free", x = list(rot = 45)), auto.key = list(space = "right"))
xyplot(Original + Accepted + Ratio ~ Taxon, res, group = Type, scales = list(relation = "free", y = list(log = 10), x = list(rot = 45)), auto.key = list(space = "right"))
1o^2.5
10^2.5
is.nan(res[, "Ration"])
is.nan(res[, "Ratio"])
res[is.nan(res[, "Ratio"]), "Ratio"]
?na.pass
res[is.nan(res[, "Ratio"]), "Ratio"]
res[is.nan(res[, "Ratio"]), "Ratio"] <- 0
xyplot(Original + Accepted + Ratio ~ Taxon, res, group = Type, scales = list(relation = "free", y = list(log = 10), x = list(rot = 45)), auto.key = list(space = "right"))
res
10^0.8
10^-0.8
ls)0
ls()
src <- read.delim("stat_source.txt")
src
res <- read.delim("stat_source.txt")
library(lattice)
barchart((nuccore_pass + nuccore_skip) +nuccore_pass + (nucest_pass + nucest_skip) + nucest_pass + (nuccore_pass + nucest_pass) + accepted ~ Taxon, res, scales = list(x = list(rot = 45)), auto.key = list(space = "right", cex = 0.7), ylab = "Number of Sequences")
barchart((nuccore_pass + nuccore_skip) +nuccore_pass + (nucest_pass + nucest_skip) + nucest_pass + (nuccore_pass + nucest_pass) + accepted ~ Taxon, res, scales = list(x = list(rot = 45)), auto.key = list(space = "right", cex = 0.7), ylab = "Number of Sequences", scales = list(y = list(log = 10)))
barchart((nuccore_pass + nuccore_skip) +nuccore_pass + (nucest_pass + nucest_skip) + nucest_pass + (nuccore_pass + nucest_pass) + accepted ~ Taxon, res, scales = list(x = list(rot = 45), y = list(log = 10)), auto.key = list(space = "right", cex = 0.7), ylab = "Number of Sequences")
foo <- read.table("stat_result.txt")#
#
goo <- foo[grep("-core|-est", foo[,2]),]#
goo[,2] <- gsub("-core|-est", "", goo[,2])#
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo,c(unique(as.character(tmp[,1])), s , unique(as.character(tmp[,3])), ss))#
	}#
}#
#
res <- data.frame(Ortholog = ooo[,1], Taxon = ooo[,2], Type = ooo[,3], Count = as.numeric(ooo[,4]))#
#
tmp <- foo[foo[,3] == "spp", ]#
colnames(tmp) <- c("Ortholog", "Taxon", "Type", "Count")#
#
res <- rbind(res, tmp)
res
xyplot(Count ~ Ortholog | Taxon, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 90, cex = 0.7)))
xyplot(Count ~ Ortholog + Taxon, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 90, cex = 0.7)))
xyplot(Count ~ Ortholog, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 90, cex = 0.7)))
res
res[, "Count"]
foo <- read.table("stat_result.txt")
foo
foo <- read.table("stat_result.txt")
foo
goo <- foo[grep("-core|-est", foo[,2]),]#
goo[,2] <- gsub("-core|-est", "", goo[,2])#
ooo <- c()#
for(o in unique(as.character(goo[,1]))) {#
	sel <- goo[,1] == o#
	too <- goo[sel,]#
	for(s in unique(too[,2])) {#
		tmp <- too[too[,2] == s,, drop = FALSE]#
		ss <- sum(tmp[,4])#
		ooo <- rbind(ooo,c(unique(as.character(tmp[,1])), s , unique(as.character(tmp[,3])), ss))#
	}#
}#
#
res <- data.frame(Ortholog = ooo[,1], Taxon = ooo[,2], Type = ooo[,3], Count = as.numeric(ooo[,4]))#
#
tmp <- foo[foo[,3] == "spp", ]#
colnames(tmp) <- c("Ortholog", "Taxon", "Type", "Count")#
#
res <- rbind(res, tmp)
res
res[,"Count"]
xyplot(Count ~ Ortholog, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 90, cex = 0.7)))
xyplot(Count ~ Ortholog | Taxon, res, group = Type, auto.key = list(space = "right", cex = 0.6), scale = list(y = list(log = 10), x = list(rot = 90, cex = 0.7)))
